// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String       @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          UserRole     @default(USER)
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]
  Order         Order[]
  Payment       Payment[]
  Enrollment    Enrollment[]

  @@unique([email])
  @@map("users")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}

model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  number    String
  message   String
  createdAt DateTime @default(now())

  @@map("contact-form")
}

enum OrderStatus {
  CREATED
  PENDING
  PAID
  FAILED
  CANCELED
}

enum PaymentStatus {
  CREATED
  AUTHORIZED
  CAPTURED
  FAILED
  REFUNDED
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            String
  amount          Int
  currency        String      @default("INR")
  status          OrderStatus @default(PENDING)
  razorpayOrderId String?     @unique
  receipt         String?     @unique
  notes           Json?
  emailSent       Boolean     @default(false)
  payments        Payment[]

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Enrollment Enrollment?

  @@map("orders")
}

model Payment {
  id       String        @id @default(cuid())
  orderId  String
  order    Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId   String
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount   Int
  currency String        @default("INR")
  status   PaymentStatus @default(CREATED)

  razorpayPaymentId String? @unique
  razorpaySignature String?
  method            String?
  email             String?
  contact           String?
  rawResponse       Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  EMI       EMI?

  @@map("payments")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  plan      String
  orderId   String   @unique
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([userId, plan]) // one plan per user
  @@map("enrollments")
}

model EMI {
  id        String  @id @default(cuid())
  paymentId String  @unique
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  durationMonths Int // e.g., 3, 6, 9, 12
  interestRate   Float? // e.g., 12.5%
  baseAmount     Int? // per-installment base
  totalAmount    Int? // total repayable (amount + interest)

  cardIssuer  String? // HDFC, ICICI, etc.
  cardLast4   String? // last 4 digits
  cardNetwork String? // VISA, MASTERCARD, etc.
  cardType    String? // credit, debit

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("emis")
}

model Project {
  id           String   @id @default(cuid())
  title        String
  description  String
  downloadLink String
  viewDetails  String
  filesName    String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
